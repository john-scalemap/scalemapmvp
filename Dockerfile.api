# ScaleMap API Docker Build - Strategic Approach
# This Dockerfile is specifically designed for the API service only

# Stage 1: Dependencies
FROM public.ecr.aws/docker/library/node:20-alpine AS deps
WORKDIR /app

# Copy package files
COPY package.json ./

# Install ALL dependencies (we'll compile TypeScript)
RUN npm install --legacy-peer-deps

# Stage 2: Builder
FROM public.ecr.aws/docker/library/node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from previous stage
COPY --from=deps /app/node_modules ./node_modules
COPY package.json ./

# Copy source code
COPY server/ ./server/
COPY shared/ ./shared/
COPY tsconfig.json ./
COPY vite.config.ts ./

# Build using TypeScript compiler (not bundler - avoids vite dependency issues)
RUN npx tsc --project tsconfig.json && \
    cp -r shared dist/ && \
    echo "Build complete"

# Stage 3: Production
FROM public.ecr.aws/docker/library/node:20-alpine AS production
WORKDIR /app

# Install production dependencies only
COPY package.json ./
RUN npm install --production --legacy-peer-deps && \
    npm cache clean --force

# Copy compiled code
COPY --from=builder /app/dist ./dist

# Copy shared folder (needed at runtime for schema)
COPY --from=builder /app/shared ./shared

# Set environment
ENV NODE_ENV=production
ENV PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

EXPOSE 3000

# Run the application
CMD ["node", "dist/index.js"]